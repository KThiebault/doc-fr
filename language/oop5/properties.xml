<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propriétés</title>

 <para>
  Les variables au sein d'une classe sont appelées <emphasis>propriétés</emphasis>.
  On peut également les retrouver sous d'autres dénominations tel que
  <emphasis>champs</emphasis>, mais pour cette documentation
  <emphasis>propriété</emphasis> sera utilisé.
  Elles sont définies en utilisant un des mots-clés <literal>public</literal>,
  <literal>protected</literal>, ou <literal>private</literal>, suivi
  optionnellement, à partir de PHP 7.4, d'une déclaration de type,
  suivi d'une déclaration classique de variable.
  Cette déclaration peut comprendre une initialisation, mais celle-ci doit
  être une valeur <link linkend="language.constants">constante</link>
 </para>
 <para>
  Référez-vous à <xref linkend="language.oop5.visibility" /> pour plus
  d'informations sur la signification
  de <literal>public</literal>, <literal>protected</literal>,
  et <literal>private</literal>.
 </para>
 <note>
  <para>
   Une manière alternative et non recommandé de déclarer une propriété de classe,
   car c'est pour maintenir la rétrocompatibilité avec PHP 4,
   est d'utiliser le mot-clé <literal>var</literal>.
   La propriété sera traitée comme si elle avait
   été déclarée comme <literal>public</literal>.
  </para>
 </note>
 <para>
  Au sein des méthodes de classes, les propriétés non statiques peuvent être
  appelées en utilisant la syntaxe <literal>-&gt;</literal> (opérateur de l'objet) :
  <varname>$this-&gt;property</varname> (où <literal>property</literal> est le
  nom de la propriété). Les propriétés statiques peuvent être appelées en
  utilisant la syntaxe <literal>::</literal> (deux doubles points) :
  <varname>self::$property</varname>. Reportez-vous à la documentation sur
  le <link linkend="language.oop5.static">mot clé statique</link> pour plus d'informations
  sur la différence entre les propriétés statiques et non statiques.
 </para>
 <para>
  La pseudo-variable <varname>$this</varname> est disponible au sein de n'importe
  quelle méthode, lorsque cette méthode est appelée au sein d'un objet.
  <varname>$this</varname> est la valeur de l'objet appelant.
 </para>
 
 <para>
  <example>
   <title>Déclarations de propriétés</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   // déclaration de propriété invalide :
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Déclarations valides de propriétés :
   public $var6 = myConstant;
   public $var7 = [true, false];
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
   </programlisting>   
  </example>
 </para>

 <note>
  <para>
   Il existe des fonctions diverses qui permettent de gérer des classes et des objets.
   Voir la référence sur les <link linkend="ref.classobj">Fonctions Classes/Objets</link>.
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Déclarations des types</title>

  <para>
   À partir de PHP 7.4.0, les définitions de propriétés peuvent inclure une
   <xref linkend="language.types.declarations" />,
   avec l'exception du type <literal>callable</literal>.
   <example>
    <title>Exemple de propriétés typées</title>
    <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(1234)
NULL
]]>
    </screen>
   </example>
  </para>
   <para>
    Les propriétés typés doivent être initialisées avant d'y accéder, sinon,
    une <classname>Error</classname> sera émise.
    <example>
     <title>Accès aux propriétés</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
